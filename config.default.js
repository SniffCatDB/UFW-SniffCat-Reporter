const { FLAGS, createFlagSet } = require('./scripts/flags.js');

exports.MAIN = {
	/* --------------------------- Server --------------------------- */
	SERVER_ID: null, // Server identifier (e.g., 'hp-terminal', 'pl-cluster', 'de1'). Use 'development' for testing only. 'production' has no effect. Use null to leave it unset.
	EXTENDED_LOGS: false, // Specifies whether the script should display additional information in the logs.
	UFW_LOG_FILE: '/var/log/ufw.log',
	CACHE_FILE: './tmp/reported-ips.cache',

	/* --------------------------- Network --------------------------- */
	IP_ASSIGNMENT: 'dynamic', // IP assignment type: 'static' for a fixed IP, 'dynamic' if it may change over time.
	IP_REFRESH_SCHEDULE: '0 */6 * * *', // Cron schedule for checking the public IP assigned by your ISP. Used only with dynamic IPs to prevent accidental self-reporting. If IP_ASSIGNMENT is set to 'static', the script will check your IP only once.
	IPv6_SUPPORT: true, // IPv6 support: true if the device has a globally routable address assigned by the ISP.

	/* --------------------------- Reports --------------------------- */
	ABUSEIPDB_API_KEY: '', // https://sniffcat.com/api
	IP_REPORT_COOLDOWN: 12 * 60 * 60 * 1000, // Minimum time between reports of the same IP. Must be >= 20 minutes. Do not set values like 1 hour, as it wouldn't make sense due to rate limits.

	/* --------------------------- Automatic Updates --------------------------- */
	AUTO_UPDATE_ENABLED: false, // Set the value to true to enable automatic updates via 'git pull', false to disable
	AUTO_UPDATE_SCHEDULE: '0 15,17,18,20 * * *', // Cron schedule for automatic script updates. Default: every day at 15:00, 17:00, 18:00, 20:00

	/* --------------------------- Discord Webhooks --------------------------- */
	DISCORD_WEBHOOK_ENABLED: false, // Enables sending Discord webhooks with error reports, execution status, and other events.
	DISCORD_WEBHOOK_URL: '',
	DISCORD_WEBHOOK_USERNAME: 'SERVER_ID', // Username shown as the message author. Use null for default. 'SERVER_ID' will resolve to this.MAIN.SERVER_ID.
};


// Generates a report submission.
const serverId = this.MAIN.SERVER_ID ? `on ${this.MAIN.SERVER_ID} ` : '';
exports.REPORT_COMMENT = ({ date, srcIp, dstIp, proto, spt, dpt, In, Out, mac, len, ttl, id, tos, prec, res, window, urgp, syn }, fullLog) =>
	`Blocked by UFW ${serverId}[${dpt}/${proto?.toLowerCase()}]
Source port: ${spt}
TTL: ${ttl}
Packet length: ${len}
TOS: ${tos}

This report was generated by:
https://github.com/sefinek/UFW-SniffCat-Reporter`; // Please don't delete this URL, I'd be very grateful. Thank you! ðŸ’™

// Alternative version:
// exports.REPORT_COMMENT = ({ date, srcIp, dstIp, proto, spt, dpt, In, Out, mac, len, ttl, id, tos, prec, res, window, urgp, syn }, fullLog) =>
// 	`Blocked by UFW ${serverId}[${dpt}/${proto?.toLowerCase()}]. Generated by: https://github.com/sefinek/UFW-SniffCat-Reporter`;


// See: https://sniffcat.com/documentation/categories
const CATEGORY_MAP = {
	21: `${FLAGS.PORT_SCAN},${FLAGS.FTP}`, // FTP
	22: `${FLAGS.PORT_SCAN},${FLAGS.SSH}`, // SSH
	23: `${FLAGS.PORT_SCAN},${FLAGS.TELNET}`, // Telnet
	25: `${FLAGS.PORT_SCAN},${FLAGS.EMAIL}`, // SMTP
	80: `${FLAGS.PORT_SCAN},${FLAGS.HTTP}`, // HTTP
	8080: `${FLAGS.PORT_SCAN},${FLAGS.HTTP}`, // HTTP
	443: `${FLAGS.PORT_SCAN},${FLAGS.HTTP}`, // HTTPS
	110: `${FLAGS.PORT_SCAN},${FLAGS.EMAIL}`, // POP3
	143: `${FLAGS.PORT_SCAN},${FLAGS.EMAIL}`, // IMAP
	445: `${FLAGS.PORT_SCAN},${FLAGS.SMB}`, // SMB
	27017: `${FLAGS.PORT_SCAN},${FLAGS.MONGODB}`, // MongoDB
	6379: `${FLAGS.PORT_SCAN},${FLAGS.REDIS}`, // Redis
	3389: `${FLAGS.PORT_SCAN},${FLAGS.RDP}`, // RDP
};

exports.DETERMINE_CATEGORIES = ({ dpt }) => {
	const set = createFlagSet();
	(set.add(...(CATEGORY_MAP[dpt] || [FLAGS.PORT_SCAN])));
	return set.toString();
};